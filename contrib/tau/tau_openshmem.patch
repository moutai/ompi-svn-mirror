# Copyright (c) 2012      Mellanox Technologies, Inc.
#                         All rights reserved.
*** tau-2.21.2/src/Profile/TauShmemOpenShmemC.c	2012-01-27 20:43:12.000000000 +0200
--- new/src/Profile/TauShmemOpenShmemC.c	2012-05-21 14:14:51.000000000 +0300
***************
*** 6,11 ****
--- 6,99 ----
  #define TAU_SHMEM_TAGID tau_shmem_tagid_f=tau_shmem_tagid_f%250
  #define TAU_SHMEM_TAGID_NEXT (++tau_shmem_tagid_f) % 250 
  
+ 
+ /* This section contains old API that are not part of openshmem.org specification
+  *
+  */
+ void pshmem_init (void)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return ;
+ }  
+ 
+ void pshmem_finalize (void)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return ;
+ }  
+ 
+ char *pshmem_nodename (void)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return NULL;
+ }  
+ 
+ int pshmem_version (int *major, int *minor)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return 0;
+ }  
+ 
+ void *pshmem_malloc (size_t size)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return NULL;
+ }  
+ 
+ void pshmem_free (void *ptr)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return ;
+ }  
+ 
+ void *pshmem_realloc (void *ptr, size_t size)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return NULL;
+ }  
+ 
+ void *pshmem_memalign (size_t alignment, size_t size)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return NULL;
+ }  
+ 
+ char *psherror (void)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return NULL;
+ }  
+ 
+ char *pshmem_error (void)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return NULL;
+ }  
+ 
+ void pshmem_sync_init (long *pSync)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return ;
+ }  
+ 
+ #ifdef __cplusplus
+ # include <complex>
+ # define COMPLEXIFY(T) std::complex<T>
+ #else /* _cplusplus */
+ # include <complex.h>
+ # define COMPLEXIFY(T) T complex
+ #endif /* __cplusplus */
+ void pshmem_complexd_put (COMPLEXIFY (double) * dest,
+                                  const COMPLEXIFY (double) * src,
+                                  size_t nelems, int pe)
+ {
+     fprintf(stderr, "Dummy %s\n", __FUNCTION__);
+     return ;
+ }  
+ 
+ /* Old API */
+ 
+ 
  /**********************************************************
     start_pes
   **********************************************************/
