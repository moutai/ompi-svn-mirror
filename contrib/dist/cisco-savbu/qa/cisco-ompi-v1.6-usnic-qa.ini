#======================================================================
# Cisco configuration
#======================================================================

[MTT]
# No proxies needed on this cluster!
description = Cisco USNIC QA cluster

min_disk_free = 1%
min_disk_free_wait = 30

funclet_files = &dirname("@INI_NAME@")/Cisco.pm

trial = 0

#======================================================================
# MPI get phase
#======================================================================

[MPI get: USNIC-QA-drop]
mpi_details = OMPI v1.6

# QA will instal Open MPI + USNIC before MTT is invoked
module = Noop

#======================================================================
# Install MPI phase
#======================================================================

[MPI install: USNIC-QA-drop]
mpi_get = usnic-qa-drop

# QA will instal Open MPI + USNIC before MTT is invoked
module = Noop

#======================================================================
# MPI run details
#======================================================================

[MPI Details: OMPI v1.6]

exec = mpirun --leave-session-attached -np &test_np() --mca orte_startup_timeout 10000 @mca@ &test_executable() &test_argv()

parameters = &MPI::OMPI::find_mpirun_params(&test_command_line(), \
                                            &test_executable())
network = &MPI::OMPI::find_network(&test_command_line(), &test_executable())

mca = &enumerate( \
        "", \
        "--mca btl tcp,sm,self", \
        "--mca btl usnic,sm,self")

#---------

# It is important that the after_all_exec step is a single
# command/line so that MTT will launch it directly (instead of via a
# temporary script).  This is because the "srun" command is
# (intentionally) difficult to kill in some cases.  See
# https://svn.open-mpi.org/trac/mtt/changeset/657 for details.

after_all_exec = &if(&ne("", &getenv("SLURM_NNODES")), "srun -N " . &getenv("SLURM_NNODES")) /home/mpiteam/svn/ompi-tests/cisco/mtt/savbu-usnic/after_each_exec.pl
after_all_exec_timeout = 10

#======================================================================
# Test get phase
#======================================================================

[Test get: trivial]
module = Trivial

#----------------------------------------------------------------------

[Test get: intel]
module = SCM
scm_module = SVN
scm_url = svn+ssh://10.193.212.22/home/mirror-svnroots/ompi-tests/trunk/intel_tests

#----------------------------------------------------------------------

[Test get: ibm]
module = SCM
scm_module = SVN
scm_url = svn+ssh://10.193.212.22/home/mirror-svnroots/ompi-tests/trunk/ibm
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: onesided]
module = SCM
scm_module = SVN
scm_url = svn+ssh://10.193.212.22/home/mirror-svnroots/ompi-tests/trunk/onesided
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: mpicxx]
module = SCM
scm_module = SVN
scm_url = svn+ssh://10.193.212.22/home/mirror-svnroots/ompi-tests/trunk/cxx-test-suite
scm_post_copy = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: imb]
module = SCM
scm_module = SVN
scm_url = svn+ssh://10.193.212.22/home/mirror-svnroots/ompi-tests/trunk/IMB_3.2

#----------------------------------------------------------------------

[Test get: netpipe]
module = SCM
scm_module = SVN
scm_url = svn+ssh://10.193.212.22/home/mirror-svnroots/ompi-tests/trunk/IMB-3.7.1

#----------------------------------------------------------------------

[Test get: mpi-test-suite]
module = SCM
scm_module = SVN
scm_url = svn+ssh://10.193.212.22/home/mirror-svnroots/ompi-tests/trunk/mpi_test_suite
scm_post_copy = <<EOT
./autogen.sh
EOT

#======================================================================
# Test build phase
#======================================================================

[Test build: trivial]
test_get = trivial
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Trivial

#----------------------------------------------------------------------

[Test build: intel]
test_get = intel
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Intel_OMPI_Tests
intel_ompi_tests_make_arguments = -j 32
intel_ompi_tests_buildfile = all_tests_no_perf

#----------------------------------------------------------------------

[Test build: ibm]
test_get = ibm
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
shell_build_command = <<EOT
./configure --enable-static --disable-shared
make -j 32
EOT

#----------------------------------------------------------------------

[Test build: onesided]
test_get = onesided
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
./configure
make -j 32
EOT

#----------------------------------------------------------------------

[Test build: mpicxx]
test_get = mpicxx
save_stdout_on_success = 1
merge_stdout_stderr = 1

# Ensure we do not build for the "no C++" install
skip_mpi_install = GNU-No-cxx

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpic++
make -j 16
EOT

#----------------------------------------------------------------------

[Test build: imb]
test_get = imb
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
shell_build_command = <<EOT
cd src
make clean IMB-MPI1 IMB-EXT
EOT

#----------------------------------------------------------------------

[Test build: netpipe]
test_get = netpipe
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
make mpi
EOT

#----------------------------------------------------------------------

[Test build: mpi-test-suite]
test_get = mpi-test-suite
save_stdout_on_success = 1
merge_stdout_stderr = 1
description = HLRS MPI test suite

module = Shell
shell_build_command = <<EOT
./configure CC=mpicc CXX=mpiCC FC=mpif90 F77=mpif90 --disable-mpi2-io CFLAGS=-g
make
EOT

#======================================================================
# Test Run phase
#======================================================================

# This section is not used directly; it is included in others.
[Defaults Test run]
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = &and(&test_wifexited(), &eq(&test_wexitstatus(), 77))

save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
stderr_save_lines = 100
report_after_n_results = 100 

np = &env_max_procs()

#----------------------------------------------------------------------

[Test run: trivial]
include_section = Defaults Test run

test_build = trivial
timeout = &max(10, &test_np())
skipped = 0

specify_module = Simple
simple_first:tests = &find_executables(".")

#----------------------------------------------------------------------

[Test run: intel]
include_section = Defaults Test run

test_build = intel
timeout = &max(30, &multiply(10, &test_np()))
np = &min("60", &env_max_procs())

specify_module = Simple
simple_successful:tests = &find_executables("src")

simple_failures:tests = &find_executables(&prepend("src/", &cat("supposed_to_fail")))
simple_failures:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_failures:exclusive = 1
simple_failures:timeout = &env_max_procs()

# These tests sleep for 90 seconds (!) before attempting to process
# any messages
simple_really_slow:tests = src/MPI_Isend_flood_c src/MPI_Send_flood_c
simple_really_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_really_slow:exclusive = 1
simple_really_slow:timeout = &sum(180, &multiply(5, &test_np()))

# This test collectively sleeps for 26 seconds *per MCW rank*
simple_coll_slow:tests = src/MPI_collective_overlap_c
simple_coll_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_coll_slow:exclusive = 1
simple_coll_slow:timeout = &multiply(35, &test_np()))

#------------------------------------------------------------------------

[Test run: ibm]
include_section = Defaults Test run

test_build = ibm
timeout = &max(30, &multiply(10, &test_np()))

specify_module = Simple
simple_first:np = &env_max_procs()
simple_first:tests = &find_executables("collective", "communicator", \
                                       "datatype", "dynamic", "environment", \
                                       "group", "info", "io", "onesided", \
                                       "pt2pt", "random", "topology")

# Tests that are supposed to fail
simple_fail:tests = environment/abort environment/final
simple_fail:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_fail:exclusive = 1
simple_fail:timeout = &env_max_procs()

# Spawn tests; need to run very few
simple_spawns:tests  = dynamic/spawn dynamic/spawn_multiple
simple_spawns:np = 3
simple_spawns:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
simple_spawns:exclusive = 1
simple_spawns:timeout = &multiply(5,&env_max_procs())
simple_spawns:do_not_run = 1

# Big loop o' spawns
simple_loop_spawn:tests = dynamic/loop_spawn
simple_loop_spawn:np = 1
simple_loop_spawn:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
simple_loop_spawn:exclusive = 1
simple_loop_spawn:timeout = 600
simple_loop_spawn:do_not_run = 1

# Big loop o' comm splits and whatnot.  It runs for 10 minutes.
simple_loop_comm_split:tests = communicator/comm_split_f
simple_loop_comm_split:np = 1
simple_loop_comm_split:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(),0))
simple_loop_comm_split:exclusive = 1
simple_loop_comm_split:timeout = 660
simple_loop_comm_split:do_not_run = 1

# THREAD_MULTIPLE test will fail with the openib btl because it
# deactivates itself in the presence of THREAD_MULTIPLE.  So just skip
# it.  loop_child is the target for loop_spawn, so we don't need to
# run it (although it'll safely pass if you run it by itself).
simple_skip:tests = environment/init_thread_multiple dynamic/loop_child
simple_skip:exclusive = 1
simple_skip:do_not_run = 1

#----------------------------------------------------------------------

[Test run: onesided]
include_section = Defaults Test run

test_build = onesided
timeout = &max(30, &multiply(10, &test_np()))

specify_module = Simple
simple_pass:tests = &cat("run_list")

# This test is killing my nodes for some reason
simple_skip:tests = test_dan1
simple_skip:exclusive = 1
simple_skip:do_not_run = 1

#----------------------------------------------------------------------
     
[Test run: mpicxx]
include_section = Defaults Test run

test_build = mpicxx
timeout = &max(30, &multiply(10, &test_np()))

specify_module = Simple
simple_pass:tests = src/mpi2c++_test src/mpi2c++_dynamics_test

#----------------------------------------------------------------------

[Test run: imb-correctness]
include_section = Defaults Test run

test_build = imb
timeout = &max(2800, &multiply(50, &test_np()))
np = &min("32", &env_max_procs())

argv = -npmin &test_np()

specify_module = Simple
simple_pass:tests = src/IMB-MPI1 src/IMB-EXT

#----------------------------------------------------------------------

[SKIP Test run: imb-performance]
include_section = Defaults Test run

test_build = imb
timeout = &multiply(&test_np(), 120)
skipped = 0
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1

argv = -npmin &test_np() &enumerate("PingPong", "PingPing", "Sendrecv", "Exchange", "Allreduce", "Reduce", "Reduce_scatter", "Allgather", "Allgatherv", "Alltoall", "Bcast", "Barrier") 

specify_module = Simple
analyze_module = IMB
simple_pass:tests = src/IMB-MPI1

#----------------------------------------------------------------------

[Test run: netpipe-performance]
include_section = Defaults Test run

test_build = netpipe
skipped = 0
timeout = &multiply(&test_np(), 120)
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1
np = 2

specify_module = Simple
analyze_module = NetPipe
simple_pass:tests = NPmpi

#------------------------------------------------------------------------

# Run the MPI test suite as one big program

[Test run: mpi-test-suite-all]
test_build = mpi-test-suite
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = 0
timeout = &max(600, &multiply(100, &test_np()))
save_stdout_on_pass = 1
merge_stdout_stderr = 1
np = &env_max_procs()

specify_module = Simple
simple_first:np = &env_max_procs()
simple_first:tests = mpi_test_suite
# v1.4 requires that we have to ^MPI_TYPE_MIX, ^MPI_SHORT_INT...
# is this still true for v1.6?
# On Rainer's advice, skip the onesided tests
simple_first:argv = -x relaxed -d All,^MPI_TYPE_MIX,^MPI_SHORT_INT -t All,^One-sided

#------------------------------------------------------------------------

# Run the MPI test suite as individual tests

# Currently causing GB of coredumps :-(  
# Get those fixed first, then re-enable...
[SKIP Test run: mpi-test-suite-individual]
test_build = mpi-test-suite
pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
skipped = 0
timeout = &max(600, &multiply(100, &test_np()))
save_stdout_on_pass = 1
merge_stdout_stderr = 1
np = &env_max_procs()

specify_module = Simple
simple_first:np = &env_max_procs()
simple_first:tests = mpi_test_suite
# v1.4 requires that we have to ^MPI_TYPE_MIX, ^MPI_SHORT_INT...
# is this still true for v1.6?
# On Rainer's advice, skip the onesided tests
simple_first:argv = -x relaxed -t &step(0, &Cisco::find_hlrs_max_test_num() - 1, 1) -d All,^MPI_TYPE_MIX,^MPI_SHORT_INT -t All,^One-sided

#======================================================================
# Reporter phase
#======================================================================

[SKIP Reporter: IU database]
module = MTTDatabase

mttdatabase_realm = OMPI
mttdatabase_username = cisco
mttdatabase_password = &stringify(&cat("/home/mpiteam/mtt-db-password.txt"))
mttdatabase_platform = savbu-usnic
mttdatabase_hostname = &if(&eq(&getenv("SLURM_NODELIST"), ""), &env_hosts(), \
                       &getenv("SLURM_NODELIST") . " / SLURM job id " . &getenv("SLURM_JOBID"))
mttdatabase_url = https://mtt.open-mpi.org/submit/
mttdatabase_debug_filename = mttdb_debug_file
mttdatabase_keep_debug_files = 1
mttdatabase_debug_server = 1

#----------------------------------------------------------------------

[SKIP Reporter: send email]
module = Email
email_to = jsquyres@cisco.com
email_subject = MPI test results: $phase / $section

#----------------------------------------------------------------------

# This is a backup for while debugging MTT; it also writes results to
# a local text file
[Reporter: text file]
module = TextFile

textfile_filename = cisco-usnic-qa-$phase-$section-$mpi_name-$mpi_version.txt
textfile_separator = >>>>----------------------------------------------------------<<<<

